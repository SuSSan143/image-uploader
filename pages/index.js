import { useCallback, useEffect, useRef, useState } from "react";
import Head from "next/head";
import Image from "next/image";

import axios from "axios";
import { useDropzone } from "react-dropzone";

import styles from "../styles/Home.module.css";
import {
  Button,
  CopyButton,
  Heading,
  HomeButton,
  ImageContainer,
  InnerUploadBox,
  LinkContainer,
  LinkText,
  Modal,
  Progress,
  StyledImage,
  Text,
  UploadBox,
} from "../components/StyledComponents";

export default function Home() {
  const [uploadedImage, setuploadedImage] = useState({});
  const [isImageShowing, setIsImageShowing] = useState(false);
  const [progress, setProgress] = useState({
    loaded: 0,
    total: 0,
  });
  const loadingModalRef = useRef(null);

  const onDrop = useCallback((acceptedFiles) => {
    uploadToServer(acceptedFiles[0]);
  }, []);

  const { getRootProps, getInputProps, isDragActive, open } = useDropzone({
    onDrop,
    accept: {
      "image/*": [".jpeg", ".jpg", ".png"],
    },
    noClick: true,
  });

  const uploadToServer = async (image) => {
    // @ts-ignore
    loadingModalRef.current.showModal();
    const body = new FormData();
    body.append("files", image);
    const response = await axios.post(
      `${process.env.NEXT_PUBLIC_STRAPI_API_URL}api/upload`,
      body,
      {
        onUploadProgress: (progressEvent) => {
          const { loaded, total } = progressEvent;
          setProgress({
            loaded: loaded,
            total: total,
          });
        },
      }
    );
    const { data } = await response;
    await setuploadedImage(data[0]);
    // @ts-ignore
    loadingModalRef.current.close();
    setIsImageShowing(true);
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(uploadedImage.url).then(() => {
      alert(`Coppied ${uploadedImage.url} to clipboard`);
    });
  };

  if (isImageShowing && uploadedImage.hasOwnProperty("url")) {
    return (
      <ImageContainer>
        <StyledImage
          src={uploadedImage.url}
          height={uploadedImage.height}
          width={uploadedImage.width}
          alt="uploadedImage"
        />
        <LinkContainer>
          <LinkText>{`${uploadedImage.url}`}</LinkText>
          <CopyButton onClick={copyToClipboard}>Copy</CopyButton>
        </LinkContainer>
        <HomeButton onClick={() => setIsImageShowing(false)}>
          Go to Home
        </HomeButton>
      </ImageContainer>
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Image Uploader</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <UploadBox {...getRootProps()}>
          <InnerUploadBox>
            <Heading>Upload your images here</Heading>
            <Image
              src="/undraw_upload_re_pasx.svg"
              alt="upload bg pic"
              width={180}
              height={180}
            />
            <div>
              <input id="imageUploader" {...getInputProps()} />
              {isDragActive ? (
                <Text>Drop now ...</Text>
              ) : (
                <Text>Drag & drop your images here</Text>
              )}
            </div>
            <span>OR</span>
            <Button onClick={open}>Choose file</Button>
          </InnerUploadBox>
        </UploadBox>
      </main>
      <Modal ref={loadingModalRef}>
        <Progress max={progress.total} value={progress.loaded} />
      </Modal>
    </div>
  );
}
